{"version":3,"sources":["assets/images/logo2.svg","store/actions.js","helpers/constants.js","store/reducer.js","helpers/apiData.js","store/sagas.js","store/index.js","components/header/index.js","components/comments/Comment.js","store/selectors.js","components/comments/CommentForm.js","helpers/random.js","components/comments/CommentList.js","components/posts/Post.js","components/pagination/Pagination.js","components/search/Search.js","components/sort/SortMenuItem.js","components/sort/SortMenu.js","components/posts/PostList.js","helpers/paginate.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","POSTS_DATA_REQUESTED","POSTS_DATA_SUCCEEDED","getPostsDataSucceeded","data","type","POSTS_DATA_FAILED","COMMENTS_DATA_REQUESTED","COMMENTS_DATA_SUCCEEDED","COMMENTS_DATA_FAILED","SAVE_COMMENT_DATA","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SORT_POSTS_BY_PARAM","FILTER_POSTS","authors","defaultState","fromJS","posts","loading","list","filters","comments","currentPostId","apiData","requestUrl","bodyData","arguments","length","undefined","method","headers","body","Object","assign","fetchOptions","JSON","stringify","fetch","then","Promise","all","json","catch","response","_response","slicedToArray","httpResponse","status","Error","ok","concat","makeRequest","process","postsDataRequested","sagaPostsDataRequested","commentsDataRequested","sagaCommentsDataRequested","mainSaga","regenerator_default","a","wrap","_context","prev","next","call","sent","put","t0","console","log","e","stop","_marked","_context2","takeLatest","_marked2","_ref","id","_data","_context3","error","_marked3","_context4","_marked4","_context5","fork","_marked5","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","state","action","setIn","update","map","item","set","get","mergeDeep","getIn","toOrderedSet","toList","merge","updateIn","index","findIndex","order","sortBy","orderBy","reverse","applyMiddleware","apply","run","Header","react_default","createElement","className","src","logo","alt","Comment","split","key","getPostListState","createSelector","filter","every","f","String","toLocaleLowerCase","includes","indexOf","postsList","toJS","getCommentsState","getCurrentPostId","CommentForm","formData","postId","name","email","handleSubmit","event","preventDefault","_this","setState","objectSpread","props","upTo","Math","round","random","saveCommentData","clearState","handleChange","target","value","_this$state$formData","this","onSubmit","htmlFor","onChange","required","React","Component","mapDispatchToProps","connect","CommentList","_this$props","Fragment","comment","comments_Comment","comments_CommentForm","Post","getComments","getCommentsDataRequested","addRemoveFavorites","favorite","removeFromFavorites","addToFavorites","_this2","title","onClick","components_comments_CommentList","Pagination","rowsPerPage","page","onChangePage","count","pageNumbers","i","ceil","push","number","Search","List","search","onChangeHandler","values","multiple","Array","from","selectedOptions","checked","toPush","filterNot","onSearchInputHandler","x","filterPosts","author","placeholder","SortMenuItem","onClickBtn","label","options","SortMenu","option","sort_SortMenuItem","PostList","currentPage","postPerPage","getPosts","getPostsDataRequested","handleChangePage","Number","sortData","sortPostsByParam","_this$state","currentPosts","perPage","currPage","lastPostIndex","firstPostIndex","slice","paginate","components_sort_SortMenu","components_search_Search","post","posts_Post","components_pagination_Pagination","App","header","components_posts_PostList","require","config","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mVCA3BC,EAAuB,uBAQ7B,IAAMC,EAAuB,uBAE7B,SAASC,EAAsBC,GAClC,MAAO,CACHC,KAAMH,EACNE,QAID,IAAME,EAAoB,oBAU1B,IAAMC,EAA0B,0BAShC,IAAMC,EAA0B,0BAShC,IAAMC,EAAuB,uBAS7B,IAAMC,EAAoB,oBAS1B,IAAMC,EAAmB,mBASzB,IAAMC,EAAwB,wBAS9B,IAAMC,EAAsB,sBAU5B,IAAMC,EAAe,2BC3FfC,EAAU,CACnB,eACA,eACA,eACA,oBACA,kBACA,kBACA,uBACA,mBACA,mBACA,oBCAEC,EAAeC,YAAO,CACxBC,MAAO,CACHC,SAAS,EACTC,KAAM,GACNC,QAAS,IAEbC,SAAU,CACNH,SAAS,EACTC,KAAM,IAEVG,cAAe,yCCeZ,SAASC,EAAQC,GAA2C,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,GAG3C,OAtCJ,SAAqBF,GAAyD,IAA7CK,EAA6CH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApC,MAAOD,EAA6BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlB,GAAII,EAAcJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAChEK,EAAOC,OAAOC,OAAO,GAAIR,GACzBS,EAAe,CAACL,SAAQC,WAO9B,MALe,QAAXD,IACAK,EAAaH,KAAOI,KAAKC,UAAUL,GACnCG,EAAaJ,QAAQ,gBAAkB,oBAGpCO,MAAMb,EAAYU,GACpBI,KAAK,SAAAnC,GAAI,OAAIoC,QAAQC,IAAI,CAACrC,EAAKsC,OAAQtC,IAAOuC,MAAM,kBAAMH,QAAQC,IAAI,CAAC,GAAIrC,QAC3EmC,KAAK,SAAAK,GAAY,IAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CACeW,EADf,GACPxC,EADOyC,EAAA,GACDE,EADCF,EAAA,GAGd,GAA4B,MAAxBE,EAAaC,OACb,MAAM,IAAIC,MAAMF,EAAaC,QAGjC,GAA4B,MAAxBD,EAAaC,OACb,MAAM,IAAIC,MAAM,OAGpB,IAAKF,EAAaG,KAAO9C,EACrB,MAAM,IAAI6C,MAAJ,gBAAAE,OAA0BJ,EAAaC,SAGjD,GAAID,EAAaG,GACb,OAAO9C,EAIX,MAAM,IAAI6C,MAAJ,gBAAAE,OAA0BJ,EAAaC,WAO9CI,CAFKC,uCAAgC5B,EADmBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,MAGxBD,kBC9B1B4B,cAUAC,cAIAC,cAUAC,cAIeC,GA5BzB,SAAUJ,IAAV,IAAAlD,EAAA,OAAAuD,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEqB,OAFrBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE2BC,YAAKzC,EAAS,UAFzC,OAGQ,OADMpB,EAFd0D,EAAAI,KAAAJ,EAAAE,KAAA,EAGcG,YAAIhE,EAAsBC,IAHxC,OAAA0D,EAAAE,KAAA,gBAMQ,OANRF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAKQO,QAAQC,IAARR,EAAAM,IALRN,EAAAE,KAAA,GAMcG,aJKqBI,EILCT,EAAAM,GJMzB,CACH/D,KAAMC,EACNiE,OIdR,yBAAAT,EAAAU,OJWO,IAA4BD,GIXnCE,EAAA,cAUA,SAAUlB,IAAV,OAAAI,EAAAC,EAAAC,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OACI,OADJU,EAAAV,KAAA,EACUW,YAAW1E,EAAsBqD,GAD3C,wBAAAoB,EAAAF,SAAAI,GAIA,SAAUpB,EAAVqB,GAAA,IAAAC,EAAAC,EAAA,OAAApB,EAAAC,EAAAC,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OAEqB,OAFYc,EAAjCD,EAAiCC,GAAjCE,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAE2BC,YAAKzC,EAAD,oBAAA2B,OAA8B2B,IAF7D,OAGQ,OADM1E,EAFd4E,EAAAd,KAAAc,EAAAhB,KAAA,EAGcG,YJcH,CACH9D,KAAMG,EACNJ,KIhBmCA,IAH3C,OAAA4E,EAAAhB,KAAA,gBAMQ,OANRgB,EAAAjB,KAAA,EAAAiB,EAAAZ,GAAAY,EAAA,SAKQX,QAAQY,MAARD,EAAAZ,IALRY,EAAAhB,KAAA,GAMcG,aJmBwBI,EInBCS,EAAAZ,GJoB5B,CACH/D,KAAMI,EACN8D,OI5BR,yBAAAS,EAAAR,OJyBO,IAA+BD,GIzBtCW,EAAA,cAUA,SAAUzB,IAAV,OAAAE,EAAAC,EAAAC,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OACI,OADJmB,EAAAnB,KAAA,EACUW,YAAWpE,EAAyBiD,GAD9C,wBAAA2B,EAAAX,SAAAY,GAIe,SAAU1B,IAAV,OAAAC,EAAAC,EAAAC,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OACX,OADWqB,EAAArB,KAAA,EACLvB,YAAI,CACN6C,YAAK/B,GACL+B,YAAK7B,KAHE,wBAAA4B,EAAAb,SAAAe,GC/Bf,IAAIC,EAAmBC,IAOvB,IAAMC,EAAiBC,cACjBC,EAAc,CAACF,GAEfG,EAAQC,YHQC,WAAoD,IAAnCC,EAAmCpE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3BX,EAAcgF,EAAarE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAC3D,OAAQqE,EAAO3F,MACX,KAAKJ,EACD,OAAO8F,EAAME,MAAM,CAAC,eAAe,GAEvC,KAAK/F,EACD,OAAO6F,EACFE,MAAM,CAAC,QAAS,QAAShF,YAAO+E,EAAO5F,MAAM8F,OAAO,SAAC9E,GAAD,OAAUA,EAAK+E,IAAI,SAACC,GAAD,OAAUA,EAAKC,IAAI,SAAUtF,EAAQqF,EAAKE,IAAI,UAAU,IAAID,IAAI,YAAY,QAG5J,KAAK/F,EACD,OAAOyF,EAAME,MAAM,CAAC,QAAS,YAAY,GAE7C,KAAK1F,EACD,OAAOwF,EACFE,MAAM,CAAC,iBAAkBhF,YAAO+E,EAAOlB,KACvCmB,MAAM,CAAC,WAAY,YAAY,GAExC,KAAKzF,EACD,OAAOuF,EACFE,MAAM,CAAC,WAAY,QAAUM,YAAUR,EAAMS,MAAM,CAAC,WAAY,SAAUvF,YAAO+E,EAAO5F,OAAQqG,eAAeC,UAC/GT,MAAM,CAAC,WAAY,YAAY,GAExC,KAAKxF,EACD,OAAOsF,EAAME,MAAM,CAAC,WAAY,YAAY,GAEhD,KAAKvF,EACD,OAAOqF,EAAME,MAAM,CAAC,WAAY,QAAUF,EAAMS,MAAM,CAAC,WAAY,SAAUG,MAAM1F,YAAO+E,EAAO5F,QAErG,KAAKO,EACD,OAAOoF,EAAMa,SAAS,CAAC,QAAS,QAAU,SAACxF,GACvC,IAAMyF,EAAQzF,EAAK0F,UAAW,SAACV,GAC3B,OAAOA,EAAKE,IAAI,QAAUN,EAAOlB,KAErC,OAAO1D,EAAK6E,MAAM,CAACY,EAAO,aAAa,KAG/C,KAAKjG,EACD,OAAOmF,EAAMa,SAAS,CAAC,QAAS,QAAU,SAACxF,GACvC,IAAMyF,EAAQzF,EAAK0F,UAAW,SAACV,GAC3B,OAAOA,EAAKE,IAAI,QAAUN,EAAOlB,KAErC,OAAO1D,EAAK6E,MAAM,CAACY,EAAO,aAAa,KAG/C,KAAKhG,EACD,OAAOkF,EAAMa,SAAS,CAAC,QAAS,QAAU,SAACxF,GACvC,MAAwB,QAAjB4E,EAAOe,MAAkB3F,EAAK4F,OAAO,SAACZ,GAAD,OAAUA,EAAKE,IAAIN,EAAOiB,WAAY7F,EAAK4F,OAAO,SAACZ,GAAD,OAAUA,EAAKE,IAAIN,EAAOiB,WAAUC,YAG1I,KAAKpG,EACD,OAAOiF,EAAME,MAAM,CAAC,QAAS,WAAYhF,YAAO+E,EAAO3E,UAE3D,QACI,OAAO0E,IG9DgBP,EAAiB2B,IAAeC,WAAf,EAAmBxB,KAEvEF,EAAe2B,IAAI3D,GAEJmC,6CCLAyB,EAXA,WACX,OACIC,EAAA3D,EAAA4D,cAAA,UAAQC,UAAU,cACdF,EAAA3D,EAAA4D,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAA3D,EAAA4D,cAAA,mECCGK,GANC,SAAAhD,GAAA,IAAEzE,EAAFyE,EAAEzE,KAAF,OACZmH,EAAA3D,EAAA4D,cAAA,MAAIC,UAAU,WAAWrH,EAAK4B,KAAK8F,MAAM,MAAU3B,IAAI,SAACC,EAAM2B,GAC1D,OAAOR,EAAA3D,EAAA4D,cAAA,QAAMO,IAAKA,GAAM3B,EAAKmB,EAAA3D,EAAA4D,cAAA,yBCUxBQ,GAAmBC,aAZZ,SAAAlC,GAChB,IAAM3F,EAAO2F,EAAMO,IAAI,SACjBjF,EAAU0E,EAAMS,MAAM,CAAC,QAAS,YAQtC,OANqBpG,EAAKwG,SAAS,CAAC,QAAS,SAACxF,GAAD,OACzCA,EAAK8G,OAAO,SAAC9B,GAET,OADiB/E,EAAQ8G,MAAM,SAACC,GAAD,OAAQC,OAAOjC,EAAKE,IAAI8B,EAAE9B,IAAI,SAASgC,oBAAoBC,SAASF,OAAOD,EAAE5B,MAAM,CAAC,QAAS4B,EAAE9B,IAAI,SAASkC,QAAQH,OAAOjC,EAAKE,IAAI8B,EAAE9B,IAAI,aAAagC,4BAQ9L,SAACG,GAAD,OAAeA,EAAUC,SAIhBC,GAAmBV,aADZ,SAAAlC,GAAK,OAAIA,EAAMO,IAAI,aAGnC,SAAChF,GAAD,OAAcA,EAASoH,SAEdE,GAAmB,SAAA7C,GAAK,OAAIA,EAAMO,IAAI,4BCnB7CuC,8MACF9C,MAAQ,CACJ+C,SAAU,CACNhE,GAAI,EACJiE,OAAQ,EACRC,KAAM,GACNC,MAAO,GACPjH,KAAM,OAGdkH,aAAe,SAACC,GACZA,EAAMC,iBACNC,EAAKC,SAAS,SAAAvD,GAAK,OAAA9D,OAAAsH,EAAA,EAAAtH,CAAA,GACR8D,EADQ,CAEX+C,SAAS7G,OAAAsH,EAAA,EAAAtH,CAAA,GACF8D,EAAM+C,SADL,CAEJC,OAAQM,EAAKG,MAAMT,OACnBjE,ICpBM2E,EDoBQ,ICnBvBC,KAAKC,MAAMD,KAAKE,SAAWH,QAD/B,IAAmBA,GDuBf,WACCJ,EAAKG,MAAMK,gBAAgB,CAACR,EAAKtD,MAAM+C,WACvCO,EAAKS,kBAIbC,aAAe,SAACZ,GAAU,IACfL,EAAYO,EAAKtD,MAAjB+C,SACPA,EAASK,EAAMa,OAAOhB,MAAQG,EAAMa,OAAOC,MAC3CZ,EAAKC,SAAS,CAACR,gBAGnBgB,WAAa,WACTT,EAAKC,SAAS,CACVR,SAAU,CACNhE,GAAI,EACJiE,OAAQ,EACRC,KAAM,GACNC,MAAO,GACPjH,KAAM,+EAKT,IAAAkI,EACuBC,KAAKpE,MAAM+C,SAAhCE,EADFkB,EACElB,KAAMC,EADRiB,EACQjB,MAAOjH,EADfkI,EACelI,KACpB,OACIuF,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,yBACXF,EAAA3D,EAAA4D,cAAA,QAAMC,UAAU,mBAAmB2C,SAAUD,KAAKjB,cAC9C3B,EAAA3D,EAAA4D,cAAA,SAAO6C,QAAQ,QAAf,oBACA9C,EAAA3D,EAAA4D,cAAA,SAAOnH,KAAK,OAAO4J,MAAOjB,EAAMlE,GAAG,OAAOkE,KAAK,OAAOsB,SAAUH,KAAKJ,aAAcQ,UAAQ,IAE3FhD,EAAA3D,EAAA4D,cAAA,SAAO6C,QAAQ,SAAf,mBACA9C,EAAA3D,EAAA4D,cAAA,SAAOnH,KAAK,OAAO4J,MAAOhB,EAAOnE,GAAG,QAAQkE,KAAK,QAAQsB,SAAUH,KAAKJ,aAAcQ,UAAQ,IAE9FhD,EAAA3D,EAAA4D,cAAA,SAAO6C,QAAQ,QAAf,sBACA9C,EAAA3D,EAAA4D,cAAA,YAAU1C,GAAG,OAAOmF,MAAOjI,EAAMgH,KAAK,OAAOsB,SAAUH,KAAKJ,aAAcQ,UAAQ,IAElFhD,EAAA3D,EAAA4D,cAAA,UAAQnH,KAAK,UAAb,4BA1DMmK,IAAMC,WAmE1BC,GAAqB,CACvBb,gBTjBG,SAAyBzJ,GAC5B,MAAO,CACHA,OACAC,KAAMK,KSiBCiK,eANS,SAAA5E,GAAK,MAAK,IAMM2E,GAAzBC,CAA6C9B,IErEtD+B,oLAEO,IAAAC,EACcV,KAAKX,MAAjBpJ,EADFyK,EACEzK,KAAM0E,EADR+F,EACQ/F,GAEb,OACIyC,EAAA3D,EAAA4D,cAACD,EAAA3D,EAAMkH,SAAP,KACK1K,EAAKe,QACFoG,EAAA3D,EAAA4D,cAAA,sCAEAD,EAAA3D,EAAA4D,cAAA,UACKpH,EAAKgB,KAAK8G,OAAO,SAAA6C,GAAO,OAAIA,EAAQhC,SAAWjE,IAAIqB,IAAI,SAAA4E,GAAO,OAC3DxD,EAAA3D,EAAA4D,cAACwD,GAAD,CAASjD,IAAKgD,EAAQjG,GAAI1E,KAAM2K,OAI5CxD,EAAA3D,EAAA4D,cAACyD,GAAD,CAAalC,OAAQjE,YAhBX0F,IAAMC,WA6BjBE,eAPS,SAAA5E,GAAK,MAAK,CAC9B3F,KAAMuI,GAAiB5C,GACvBjB,GAAI8D,GAAiB7C,KAGE,GAEZ4E,CAA6CC,IC9BtDM,8MAEFC,YAAc,SAACrG,GACXuE,EAAKG,MAAM4B,yBAAyBtG,MAGxCuG,mBAAqB,SAACvG,GACduE,EAAKG,MAAMpJ,KAAKkL,SAChBjC,EAAKG,MAAM+B,oBAAoBzG,GAE/BuE,EAAKG,MAAMgC,eAAe1G,4EAKzB,IAAA2G,EAAAtB,KAAAU,EACyBV,KAAKX,MAA5BpJ,EADFyK,EACEzK,KAAMmB,EADRsJ,EACQtJ,cACb,OACIgG,EAAA3D,EAAA4D,cAAA,UACID,EAAA3D,EAAA4D,cAAA,SAAGD,EAAA3D,EAAA4D,cAAA,cAASpH,EAAKsL,MAAM5D,MAAM,MAAU3B,IAAI,SAACC,EAAM2B,GAC9C,OAAOR,EAAA3D,EAAA4D,cAAA,QAAMO,IAAKA,GAAM3B,EAAKmB,EAAA3D,EAAA4D,cAAA,gBAEjCD,EAAA3D,EAAA4D,cAAA,KAAGC,UAAU,aAAarH,EAAK4B,KAAK8F,MAAM,MAAU3B,IAAI,SAACC,EAAM2B,GAC3D,OAAOR,EAAA3D,EAAA4D,cAAA,QAAMO,IAAKA,GAAM3B,EAAKmB,EAAA3D,EAAA4D,cAAA,eAEjCD,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,0BACXF,EAAA3D,EAAA4D,cAAA,UAAQmE,QAAS,kBAAMF,EAAKN,YAAY/K,EAAK0E,KAAKzE,KAAK,UAAvD,yBACAkH,EAAA3D,EAAA4D,cAAA,UAAQmE,QAAS,kBAAMF,EAAKJ,mBAAmBjL,EAAK0E,KAAKzE,KAAK,OACtDoH,UAAWrH,EAAKkL,SAAW,8BAAgC,4BAC9DlL,EAAKkL,SAAW,yBAAsB,wBAG9C/J,IAAkBnB,EAAK0E,IACxByC,EAAA3D,EAAA4D,cAACoE,GAAD,CAAa9G,GAAI1E,EAAK0E,aAjCnB0F,IAAMC,WA6CnBC,GAAqB,CACvBU,yBZvBG,SAAkCtG,GACrC,MAAO,CACHA,KACAzE,KAAME,IYqBViL,eZYG,SAAwB1G,GAC3B,MAAO,CACHA,KACAzE,KAAMM,IYdV4K,oBZoBG,SAA6BzG,GAChC,MAAO,CACHA,KACAzE,KAAMO,KYpBC+J,eAVS,SAAA5E,GAAK,MAAK,CAC9BxE,cAAeqH,GAAiB7C,KASI2E,GAAzBC,CAA6CO,ICjC7CW,gBArBI,SAAArC,GAGf,IAHwB,IACjBsC,EAA0CtC,EAA1CsC,YAAaC,EAA6BvC,EAA7BuC,KAAMC,EAAuBxC,EAAvBwC,aAAcC,EAASzC,EAATyC,MAClCC,EAAc,GACXC,EAAI,EAAGA,GAAKzC,KAAK0C,KAAKH,EAAQH,GAAcK,IACjDD,EAAYG,KAAKF,GAErB,OAAOD,EAAY/F,IAAI,SAAAmG,GACnB,OACI/E,EAAA3D,EAAA4D,cAAA,MACIO,IAAKuE,EACLxH,GAAIwH,EACJX,QAASK,EACTvE,UAAWsE,IAASO,EAAS,yBAA2B,mBAEvDA,OCVXC,qNACFxG,MAAQ,CACJ1E,QAASmL,cACTC,OAAQ,MAEZC,gBAAkB,SAACvD,GACf,IAAMpB,EAAMoB,EAAMa,OAAOhB,KACnB2D,EAASxD,EAAMa,OAAO4C,SAAWC,MAAMC,KAAK3D,EAAMa,OAAO+C,gBAAiB,SAAC3G,GAAD,OAAWA,EAAK6D,QAAUd,EAAMa,OAAOgD,QAAU,CAAC7D,EAAMa,OAAOC,OAAS,GAClJgD,EAAS9D,EAAMa,OAAOgD,SAAWL,EAAO/K,OAAS,EACjDsG,EAASjH,YAAO,CAClB8G,IAAKA,EACLkC,MAAO0C,IAGXtD,EAAKC,SAAS,SAACvD,GAAD,OAAA9D,OAAAsH,EAAA,EAAAtH,CAAA,GACP8D,EADO,CAEV1E,QAAS0E,EAAM1E,QAAQ6E,OAAO,SAAA9E,GAC1B,OAAO6L,EAAS7L,EAAK8L,UAAU,SAAC9G,GAAD,OAAUA,EAAKE,IAAI,SAAWyB,IAAKsE,KAAKnE,GAAU9G,EAAK8L,UAAU,SAAC9G,GAAD,OAAUA,EAAKE,IAAI,SAAWyB,aAO1IoF,qBAAuB,SAAChE,GACpB,IAAMc,EAAQd,EAAMa,OAAOC,MAC3BZ,EAAKC,SAAS,SAACvD,GAAD,OAAA9D,OAAAsH,EAAA,EAAAtH,CAAA,GACP8D,EADO,CAEV0G,OAAQxC,EACR5I,QAAS0E,EAAM1E,QAAQ6E,OAAO,SAAA9E,GAAI,OAAKA,EAAK+E,IAAI,SAAAiH,GAAC,MAAsB,aAAjBA,EAAE9G,IAAI,QAA0C,WAAjB8G,EAAE9G,IAAI,OAAuB8G,EAAEnH,MAAM,CAAC,QAAS,GAAIgE,GAASmD,aAIzJlE,aAAe,SAACC,GACZA,EAAMC,iBACNC,EAAKG,MAAM6D,YAAYhE,EAAKtD,MAAM1E,QAAQqH,iFAI1C,OACInB,EAAA3D,EAAA4D,cAACD,EAAA3D,EAAMkH,SAAP,KACIvD,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,oBACXF,EAAA3D,EAAA4D,cAAA,QAAM4C,SAAUD,KAAKjB,cACjB3B,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,yBACXF,EAAA3D,EAAA4D,cAAA,WACID,EAAA3D,EAAA4D,cAAA,UAAQoF,UAAQ,EAAC5D,KAAK,SAASlE,GAAG,SAASwF,SAAUH,KAAKuC,iBACrD3L,EAAQoF,IAAI,SAACmH,EAAQzG,GAAT,OACTU,EAAA3D,EAAA4D,cAAA,UAAQO,IAAKlB,EAAOoD,MAAOqD,GAASA,OAKhD/F,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,0BACXF,EAAA3D,EAAA4D,cAAA,SAAO6C,QAAQ,eAAf,cACA9C,EAAA3D,EAAA4D,cAAA,SAAOnH,KAAK,WAAWiK,SAAUH,KAAKuC,gBAAiB1D,KAAK,QAAQlE,GAAG,QAChEmF,MAAOE,KAAKpE,MAAM0G,UAE7BlF,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,0BACXF,EAAA3D,EAAA4D,cAAA,SAAO6C,QAAQ,cAAf,mBACA9C,EAAA3D,EAAA4D,cAAA,SAAOnH,KAAK,WAAWiK,SAAUH,KAAKuC,gBAAiB1D,KAAK,OAAOlE,GAAG,OAC/DmF,MAAOE,KAAKpE,MAAM0G,UAE7BlF,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,0BACXF,EAAA3D,EAAA4D,cAAA,SAAO6C,QAAQ,mBAAf,YACA9C,EAAA3D,EAAA4D,cAAA,SAAOnH,KAAK,WAAWiK,SAAUH,KAAKuC,gBAAiB1D,KAAK,WAAWlE,GAAG,WACnEmF,MAAM,UAEjB1C,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,0BACXF,EAAA3D,EAAA4D,cAAA,SAAOnH,KAAK,OAAOoH,UAAU,eAAe6C,SAAUH,KAAKgD,qBACpDI,YAAY,cAAcvE,KAAK,QAAQlE,GAAG,UACjDyC,EAAA3D,EAAA4D,cAAA,UAAQnH,KAAK,UAAb,sBAtEXmK,IAAMC,YAkFrBC,GAAqB,CACvB2C,YdGG,SAAqBhM,GACxB,MAAO,CACHA,UACAhB,KAAMS,KcJC6J,eALS,SAAA5E,GAAK,MAAK,IAKM2E,GAAzBC,CAA6C4B,cCtE7CiB,8MAlBXC,WAAa,WACTpE,EAAKG,MAAMmC,QAAQtC,EAAKG,MAAM1E,6EAGzB,IAAA+F,EAC+BV,KAAKX,MAAlC1E,EADF+F,EACE/F,GAAI4I,EADN7C,EACM6C,MAAO3G,EADb8D,EACa9D,MAAOE,EADpB4D,EACoB5D,QACzB,OACIM,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,iBACXF,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,iBACXF,EAAA3D,EAAA4D,cAAA,UAAQC,UAAU,cAAckE,QAASxB,KAAKsD,YAAYlG,EAAA3D,EAAA4D,cAAA,YAAOkG,IAChEzG,IAAYnC,GACbyC,EAAA3D,EAAA4D,cAAA,QAAMC,UAAU,cAAwB,QAAVV,EAAkB,SAAW,WAC/DQ,EAAA3D,EAAA4D,cAAA,wBAbWgD,IAAMC,WCC3BkD,GAAU,CAAC,CAAC7I,GAAI,KAAM4I,MAAO,YAAa,CAAC5I,GAAI,QAAS4I,MAAO,cAAU,CAAC5I,GAAI,WAAY4I,MAAO,aAsBxFE,8MAnBXH,WAAa,SAAC3I,GACVuE,EAAKG,MAAMmC,QAAQ7G,4EAGd,IAAA2G,EAAAtB,KAAAU,EACoBV,KAAKX,MAAvBzC,EADF8D,EACE9D,MAAOE,EADT4D,EACS5D,QACd,OACIM,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,2BACXF,EAAA3D,EAAA4D,cAAA,uBACCmG,GAAQxH,IAAI,SAAA0H,GAAM,OACftG,EAAA3D,EAAA4D,cAACsG,GAAD,CAAc/F,IAAK8F,EAAO/I,GAAIA,GAAI+I,EAAO/I,GAAI4I,MAAOG,EAAOH,MAAO/B,QAASF,EAAKgC,WAAY1G,MAAOA,EACrFE,QAASA,cAZpBuD,IAAMC,WCOvBsD,8MACFhI,MAAQ,CACJiI,YAAa,EACbC,YAAa,GACbhH,QAAS,KACTF,MAAO,SAOXmH,SAAW,WACP7E,EAAKG,MAAM2E,2BAGfC,iBAAmB,SAACjF,GAChBE,EAAKC,SAAS,CACV0E,YAAaK,OAAOlF,EAAMa,OAAOlF,SAGzCwJ,SAAW,SAACxJ,GACRuE,EAAKC,SAAS,SAAAvD,GAAK,OAAA9D,OAAAsH,EAAA,EAAAtH,CAAA,GACZ8D,EADY,CAEfkB,QAASnC,EACTiC,MAAuB,QAAhBhB,EAAMgB,MAAkB,OAAS,SACxC,WACAsC,EAAKG,MAAM+E,iBAAiBlF,EAAKtD,MAAMgB,MAAOsC,EAAKtD,MAAMkB,+FAlB7DkD,KAAK+D,4CAuBA,IAAAzC,EAAAtB,KACE/J,EAAQ+J,KAAKX,MAAbpJ,KADFoO,EAE8BrE,KAAKpE,MAAjCkI,EAFFO,EAEEP,YAAaD,EAFfQ,EAEeR,YACdS,EChDP,SAAkBrO,EAAMsO,EAASC,GACpC,IAAMC,EAAgBD,EAAWD,EAC3BG,EAAiBD,EAAgBF,EACvC,OAAOtO,EAAK0O,MAAMD,EAAgBD,GD6CTG,CAAS3O,EAAKgB,KAAM6M,EAAaD,GACtD,OACIzG,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,kBACVrH,EAAKe,QACFoG,EAAA3D,EAAA4D,cAAA,sCAEAD,EAAA3D,EAAA4D,cAAAD,EAAA3D,EAAAkH,SAAA,KACAvD,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,6BACXF,EAAA3D,EAAA4D,cAACwH,GAAD,CAAUjI,MAAOoD,KAAKpE,MAAMgB,MAAOE,QAASkD,KAAKpE,MAAMkB,QAAS0E,QAASxB,KAAKmE,WAC9E/G,EAAA3D,EAAA4D,cAACyH,GAAD,OAEJ1H,EAAA3D,EAAA4D,cAAA,MAAIC,UAAU,QAETrH,EAAKgB,KAAKQ,OAAS,EAChB2F,EAAA3D,EAAA4D,cAAAD,EAAA3D,EAAAkH,SAAA,KACC2D,EAAatI,IAAI,SAAA+I,GAAI,OAClB3H,EAAA3D,EAAA4D,cAAC2H,GAAD,CAAMpH,IAAKmH,EAAKpK,GAAI1E,KAAM8O,OAI9B3H,EAAA3D,EAAA4D,cAAA,2EAKRD,EAAA3D,EAAA4D,cAAA,MAAIC,UAAU,cACVF,EAAA3D,EAAA4D,cAAC4H,GAAD,CACItD,YAAamC,EACbjC,aAAc,SAACzH,GAAD,OAAOkH,EAAK2C,iBAAiB7J,IAC3C0H,MAAO7L,EAAKgB,KAAKQ,OACjBmK,KAAMiC,cAjEXxD,IAAMC,WAgFvBC,GAAqB,CACvByD,sBjB5FG,WACH,MAAO,CACH9N,KAAMJ,IiB2FVsO,iBjBZG,SAA0BxH,EAAOE,GACpC,MAAO,CACHF,QACAE,UACA5G,KAAMQ,KiBUC8J,eARS,SAAA5E,GAAK,MAAK,CAC9B3F,KAAM4H,GAAiBjC,KAOa2E,GAAzBC,CAA6CoD,IErF7CsB,GAPH,kBACR9H,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,OACXF,EAAA3D,EAAA4D,cAAC8H,EAAD,MACA/H,EAAA3D,EAAA4D,cAAC+H,GAAD,QCDRC,EAAQ,IAAUC,SAElBC,IAASC,OACLpI,EAAA3D,EAAA4D,cAACoI,EAAA,EAAD,CAAU/J,MAAOA,GACb0B,EAAA3D,EAAA4D,cAACqI,GAAD,OAEJC,SAASC,eAAe","file":"static/js/main.db4b1a79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.83329474.svg\";","export const POSTS_DATA_REQUESTED = \"POSTS_DATA_REQUESTED\";\r\n\r\nexport function getPostsDataRequested() {\r\n    return {\r\n        type: POSTS_DATA_REQUESTED,\r\n    };\r\n}\r\n\r\nexport const POSTS_DATA_SUCCEEDED = \"POSTS_DATA_SUCCEEDED\";\r\n\r\nexport function getPostsDataSucceeded(data) {\r\n    return {\r\n        type: POSTS_DATA_SUCCEEDED,\r\n        data,\r\n    };\r\n}\r\n\r\nexport const POSTS_DATA_FAILED = \"POSTS_DATA_FAILED\";\r\n\r\nexport function getPostsDataFailed(e) {\r\n    return {\r\n        type: POSTS_DATA_FAILED,\r\n        e,\r\n    };\r\n}\r\n\r\n\r\nexport const COMMENTS_DATA_REQUESTED = \"COMMENTS_DATA_REQUESTED\";\r\n\r\nexport function getCommentsDataRequested(id) {\r\n    return {\r\n        id,\r\n        type: COMMENTS_DATA_REQUESTED,\r\n    };\r\n}\r\n\r\nexport const COMMENTS_DATA_SUCCEEDED = \"COMMENTS_DATA_SUCCEEDED\";\r\n\r\nexport function getCommentsDataSucceeded(data) {\r\n    return {\r\n        type: COMMENTS_DATA_SUCCEEDED,\r\n        data,\r\n    };\r\n}\r\n\r\nexport const COMMENTS_DATA_FAILED = \"COMMENTS_DATA_FAILED\";\r\n\r\nexport function getCommentsDataFailed(e) {\r\n    return {\r\n        type: COMMENTS_DATA_FAILED,\r\n        e,\r\n    };\r\n}\r\n\r\nexport const SAVE_COMMENT_DATA = \"SAVE_COMMENT_DATA\";\r\n\r\nexport function saveCommentData(data) {\r\n    return {\r\n        data,\r\n        type: SAVE_COMMENT_DATA,\r\n    };\r\n}\r\n\r\nexport const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\n\r\nexport function addToFavorites(id) {\r\n    return {\r\n        id,\r\n        type: ADD_TO_FAVORITES,\r\n    };\r\n}\r\n\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\n\r\nexport function removeFromFavorites(id) {\r\n    return {\r\n        id,\r\n        type: REMOVE_FROM_FAVORITES,\r\n    };\r\n}\r\n\r\nexport const SORT_POSTS_BY_PARAM = \"SORT_POSTS_BY_PARAM\";\r\n\r\nexport function sortPostsByParam(order, orderBy) {\r\n    return {\r\n        order,\r\n        orderBy,\r\n        type: SORT_POSTS_BY_PARAM,\r\n    };\r\n}\r\n\r\nexport const FILTER_POSTS = \"FILTER_POSTS\";\r\n\r\nexport function filterPosts(filters) {\r\n    return {\r\n        filters,\r\n        type: FILTER_POSTS,\r\n    };\r\n}","export const authors = [\r\n    \"Jan Kowalski\",\r\n    \"Tomasz Nowak\",\r\n    \"Janusz Gajos\",\r\n    \"Ryszard Rynkowski\",\r\n    \"Adam Mickiewicz\",\r\n    \"Jan Kochanowski\",\r\n    \"Zbigniew Zamachowski\",\r\n    \"Antonio Banderas\",\r\n    \"Marek Perepeczko\",\r\n    \"Ryszard Kownacki\"];\r\n","import {\r\n    ADD_TO_FAVORITES,\r\n    COMMENTS_DATA_FAILED,\r\n    COMMENTS_DATA_REQUESTED, COMMENTS_DATA_SUCCEEDED, FILTER_POSTS, POSTS_DATA_FAILED, POSTS_DATA_REQUESTED,\r\n    POSTS_DATA_SUCCEEDED, REMOVE_FROM_FAVORITES, SAVE_COMMENT_DATA, SORT_POSTS_BY_PARAM\r\n} from \"./actions\";\r\nimport {fromJS, mergeDeep} from \"immutable\";\r\nimport {authors} from \"../helpers/constants\";\r\n\r\n\r\nconst defaultState = fromJS({\r\n    posts: {\r\n        loading: false,\r\n        list: [],\r\n        filters: [],\r\n    },\r\n    comments: {\r\n        loading: false,\r\n        list: [],\r\n    },\r\n    currentPostId: 0,\r\n});\r\n\r\nexport default function reducer(state = defaultState, action = {}) {\r\n    switch (action.type) {\r\n        case POSTS_DATA_REQUESTED: {\r\n            return state.setIn([\"isFetching\"], true);\r\n        }\r\n        case POSTS_DATA_SUCCEEDED: {\r\n            return state\r\n                .setIn([\"posts\", \"list\"], fromJS(action.data).update((list) => list.map((item) => item.set(\"author\", authors[item.get(\"userId\")-1]).set(\"favorite\", false))\r\n                ));\r\n        }\r\n        case POSTS_DATA_FAILED: {\r\n            return state.setIn([\"posts\", \"loading\"], false);\r\n        }\r\n        case COMMENTS_DATA_REQUESTED: {\r\n            return state\r\n                .setIn([\"currentPostId\"], fromJS(action.id))\r\n                .setIn([\"comments\", \"loading\"], true);\r\n        }\r\n        case COMMENTS_DATA_SUCCEEDED: {\r\n            return state\r\n                .setIn([\"comments\", \"list\"], (mergeDeep(state.getIn([\"comments\", \"list\"]), fromJS(action.data))).toOrderedSet().toList())\r\n                .setIn([\"comments\", \"loading\"], false);\r\n        }\r\n        case COMMENTS_DATA_FAILED: {\r\n            return state.setIn([\"comments\", \"loading\"], false);\r\n        }\r\n        case SAVE_COMMENT_DATA: {\r\n            return state.setIn([\"comments\", \"list\"], (state.getIn([\"comments\", \"list\"])).merge(fromJS(action.data)));\r\n        }\r\n        case ADD_TO_FAVORITES: {\r\n            return state.updateIn([\"posts\", \"list\"], ((list) => {\r\n                const index = list.findIndex(((item) => {\r\n                    return item.get(\"id\") === action.id;\r\n                }));\r\n                return list.setIn([index, \"favorite\"], true);\r\n            }));\r\n        }\r\n        case REMOVE_FROM_FAVORITES: {\r\n            return state.updateIn([\"posts\", \"list\"], ((list) => {\r\n                const index = list.findIndex(((item) => {\r\n                    return item.get(\"id\") === action.id;\r\n                }));\r\n                return list.setIn([index, \"favorite\"], false);\r\n            }));\r\n        }\r\n        case SORT_POSTS_BY_PARAM: {\r\n            return state.updateIn([\"posts\", \"list\"], ((list) => {\r\n                return action.order === \"asc\" ? list.sortBy((item) => item.get(action.orderBy)) : list.sortBy((item) => item.get(action.orderBy)).reverse();\r\n            }));\r\n        }\r\n        case FILTER_POSTS: {\r\n            return state.setIn([\"posts\", \"filters\"], fromJS(action.filters));\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n","function makeRequest(requestUrl, method = \"GET\", bodyData = {}, headers = {}) {\r\n    const body = Object.assign({}, bodyData);\r\n    const fetchOptions = {method, headers};\r\n\r\n    if (method !== \"GET\") {\r\n        fetchOptions.body = JSON.stringify(body);\r\n        fetchOptions.headers[\"Content-Type\"] = \"application/json\";\r\n    }\r\n\r\n    return fetch(requestUrl, fetchOptions)\r\n        .then(data => Promise.all([data.json(), data]).catch(() => Promise.all([{}, data])))\r\n        .then(response => {\r\n            const [data, httpResponse] = response;\r\n\r\n            if (httpResponse.status === 401) {\r\n                throw new Error(httpResponse.status);\r\n            }\r\n\r\n            if (httpResponse.status === 423) {\r\n                throw new Error(\"423\");\r\n            }\r\n\r\n            if (!httpResponse.ok || !data) {\r\n                throw new Error(`Error code - ${httpResponse.status}`);\r\n            }\r\n\r\n            if (httpResponse.ok) {\r\n                return data;\r\n\r\n            }\r\n\r\n            throw new Error(`Error code - ${httpResponse.status}`);\r\n        });\r\n}\r\n\r\nexport function apiData(requestUrl, bodyData = {}, method = \"GET\") {\r\n    const url = process.env.REACT_APP_API_URL + requestUrl;\r\n\r\n    return makeRequest(url, method, bodyData);\r\n}","import {all, call, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport {apiData} from \"../helpers/apiData\";\r\nimport {\r\n    COMMENTS_DATA_REQUESTED,\r\n    getCommentsDataFailed, getCommentsDataSucceeded, getPostsDataFailed, getPostsDataSucceeded,\r\n    POSTS_DATA_REQUESTED\r\n} from \"./actions\";\r\n\r\nfunction* postsDataRequested() {\r\n    try {\r\n        const data = yield call(apiData, \"/posts\");\r\n        yield put(getPostsDataSucceeded(data));\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put(getPostsDataFailed(error));\r\n    }\r\n}\r\n\r\nfunction* sagaPostsDataRequested() {\r\n    yield takeLatest(POSTS_DATA_REQUESTED, postsDataRequested);\r\n}\r\n\r\nfunction* commentsDataRequested({id}) {\r\n    try {\r\n        const data = yield call(apiData, `/comments?postId=${id}`);\r\n        yield put(getCommentsDataSucceeded(data));\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put(getCommentsDataFailed(error));\r\n    }\r\n}\r\n\r\nfunction* sagaCommentsDataRequested() {\r\n    yield takeLatest(COMMENTS_DATA_REQUESTED, commentsDataRequested);\r\n}\r\n\r\nexport default function* mainSaga() {\r\n    yield all([\r\n        fork(sagaPostsDataRequested),\r\n        fork(sagaCommentsDataRequested),\r\n    ]);\r\n}\r\n","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport reducer from \"./reducer\";\r\nimport mainSaga from \"./sagas\";\r\n\r\nlet composeEnhancers = compose;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n    // eslint-disable-next-line\r\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(...middlewares)));\r\n\r\nsagaMiddleware.run(mainSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport logo from \"../../assets/images/logo2.svg\";\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n            <h1>\r\n                Post Box\r\n            </h1>\r\n\r\n        </header>\r\n    );\r\n};\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Comment = ({data}) => (\r\n    <li className=\"comment\">{data.body.split('\\u000a').map((item, key) => {\r\n        return <span key={key}>{item}<br/></span>\r\n    })}</li>\r\n);\r\n\r\nexport default Comment;\r\n","import {createSelector} from \"reselect\";\r\n\r\nconst getPostList = state => {\r\n    const data = state.get(\"posts\");\r\n    const filters = state.getIn([\"posts\", \"filters\"]);\r\n\r\n    const dataFiltered = data.updateIn([\"list\"], (list) => (\r\n        list.filter((item) => {\r\n            const isFilter = filters.every((f) => (String(item.get(f.get(\"key\"))).toLocaleLowerCase().includes(String(f.getIn([\"value\", f.get(\"value\").indexOf(String(item.get(f.get(\"key\"))))])).toLocaleLowerCase())));\r\n            return isFilter;\r\n        })\r\n    ));\r\n    return dataFiltered;\r\n};\r\nexport const getPostListState = createSelector(\r\n    getPostList,\r\n    (postsList) => postsList.toJS(),\r\n);\r\n\r\nconst getComments = state => state.get(\"comments\");\r\nexport const getCommentsState = createSelector(\r\n    getComments,\r\n    (comments) => comments.toJS(),\r\n);\r\nexport const getCurrentPostId = state => state.get(\"currentPostId\");\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {randomInt} from \"../../helpers/random\";\r\nimport {saveCommentData} from \"../../store/actions\";\r\n\r\nclass CommentForm extends React.Component {\r\n    state = {\r\n        formData: {\r\n            id: 0,\r\n            postId: 0,\r\n            name: \"\",\r\n            email: \"\",\r\n            body: \"\",\r\n        },\r\n    };\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.setState(state => ({\r\n                ...state,\r\n                formData: {\r\n                    ...state.formData,\r\n                    postId: this.props.postId,\r\n                    id: randomInt(2000),\r\n                },\r\n            }\r\n        ), () => {\r\n            this.props.saveCommentData([this.state.formData]);\r\n            this.clearState();\r\n        });\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        const {formData} = this.state;\r\n        formData[event.target.name] = event.target.value;\r\n        this.setState({formData});\r\n    };\r\n\r\n    clearState = () => {\r\n        this.setState({\r\n            formData: {\r\n                id: 0,\r\n                postId: 0,\r\n                name: \"\",\r\n                email: \"\",\r\n                body: \"\",\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {name, email, body} = this.state.formData;\r\n        return (\r\n            <div className=\"CommentForm-container\">\r\n                <form className=\"CommentForm-form\" onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Twoje imię:</label>\r\n                    <input type=\"text\" value={name} id=\"name\" name=\"name\" onChange={this.handleChange} required/>\r\n\r\n                    <label htmlFor=\"email\">Twój e-mail:</label>\r\n                    <input type=\"text\" value={email} id=\"email\" name=\"email\" onChange={this.handleChange} required/>\r\n\r\n                    <label htmlFor=\"body\">Twój komentarz:</label>\r\n                    <textarea id=\"body\" value={body} name=\"body\" onChange={this.handleChange} required/>\r\n\r\n                    <button type=\"submit\">Dodaj komentarz</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nconst mapDispatchToProps = {\r\n    saveCommentData\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentForm);\r\n","import {authors} from \"./constants\";\r\n\r\nexport function randomInt(upTo) {\r\n    return Math.round(Math.random() * upTo);\r\n}\r\n\r\nexport function randomAuthor() {\r\n    const index = Math.round(Math.random() * (authors.length - 1));\r\n    return authors[index];\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Comment from \"./Comment\";\r\nimport {getCommentsState, getCurrentPostId} from \"../../store/selectors\";\r\nimport \"./CommentList.css\";\r\nimport CommentForm from \"./CommentForm\";\r\n\r\nclass CommentList extends React.Component {\r\n\r\n    render() {\r\n        const {data, id} = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {data.loading ? (\r\n                    <p>Ładowanie danych ...</p>\r\n                ) : (\r\n                    <ul>\r\n                        {data.list.filter(comment => comment.postId === id).map(comment => (\r\n                            <Comment key={comment.id} data={comment}/>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n                <CommentForm postId={id}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    data: getCommentsState(state),\r\n    id: getCurrentPostId(state),\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentList);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport CommentList from \"../comments/CommentList\";\r\nimport {getCommentsDataRequested, addToFavorites, removeFromFavorites} from \"../../store/actions\";\r\nimport {getCurrentPostId} from \"../../store/selectors\";\r\n\r\nclass Post extends React.Component {\r\n\r\n    getComments = (id) => {\r\n        this.props.getCommentsDataRequested(id);\r\n    };\r\n\r\n    addRemoveFavorites = (id) => {\r\n        if (this.props.data.favorite) {\r\n            this.props.removeFromFavorites(id)\r\n        } else {\r\n            this.props.addToFavorites(id);\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        const {data, currentPostId} = this.props;\r\n        return (\r\n            <li>\r\n                <p><strong>{data.title.split(\"\\u000a\").map((item, key) => {\r\n                    return <span key={key}>{item}<br/></span>\r\n                })}</strong></p>\r\n                <p className=\"Post-body\">{data.body.split(\"\\u000a\").map((item, key) => {\r\n                    return <span key={key}>{item}<br/></span>\r\n                })}</p>\r\n                <div className=\"Post-buttons-container\">\r\n                    <button onClick={() => this.getComments(data.id)} type=\"button\">Pokaż komentarze</button>\r\n                    <button onClick={() => this.addRemoveFavorites(data.id)} type=\"link\"\r\n                            className={data.favorite ? \"Post-favorite-button-remove\" : \"Post-favorite-button-add\"}>\r\n                        {data.favorite ? \"Usuń z ulubionych\" : \"Dodaj do ulubionych\"}\r\n                    </button>\r\n                </div>\r\n                {currentPostId === data.id &&\r\n                <CommentList id={data.id}/>\r\n                }\r\n            </li>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentPostId: getCurrentPostId(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getCommentsDataRequested,\r\n    addToFavorites,\r\n    removeFromFavorites\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst Pagination = props => {\r\n    const {rowsPerPage, page, onChangePage, count} = props;\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(count / rowsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    return pageNumbers.map(number => {\r\n        return (\r\n            <li\r\n                key={number}\r\n                id={number}\r\n                onClick={onChangePage}\r\n                className={page === number ? \"Pagination-page-active\" : \"Pagination-page\"}\r\n            >\r\n                {number}\r\n            </li>\r\n        );\r\n    });\r\n\r\n};\r\n\r\nexport default Pagination;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {filterPosts} from \"../../store/actions\";\r\nimport \"./Search.css\";\r\nimport {List, fromJS} from \"immutable\";\r\nimport {authors} from \"../../helpers/constants\";\r\n\r\nclass Search extends React.Component {\r\n    state = {\r\n        filters: List(),\r\n        search: \"\",\r\n    };\r\n    onChangeHandler = (event) => {\r\n        const key = event.target.name;\r\n        const values = event.target.multiple ? Array.from(event.target.selectedOptions, (item) => (item.value)) : event.target.checked ? [event.target.value] : [];\r\n        const toPush = event.target.checked || values.length > 0;\r\n        const filter = fromJS({\r\n            key: key,\r\n            value: values,\r\n        });\r\n\r\n        this.setState((state) => ({\r\n            ...state,\r\n            filters: state.filters.update(list => {\r\n                return toPush ? list.filterNot((item) => item.get(\"key\") === key).push(filter) : list.filterNot((item) => item.get(\"key\") === key);\r\n            }),\r\n        }));\r\n\r\n\r\n    };\r\n\r\n    onSearchInputHandler = (event) => {\r\n        const value = event.target.value;\r\n        this.setState((state) => ({\r\n            ...state,\r\n            search: value,\r\n            filters: state.filters.update(list => (list.map(x => (x.get(\"key\") !== \"favorite\" && x.get(\"key\") !== \"author\") ? x.setIn([\"value\", 0], value) : x))),\r\n        }));\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.filterPosts(this.state.filters.toJS());\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"Search-container\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"Search-form-container\">\r\n                            <div>\r\n                                <select multiple name=\"author\" id=\"author\" onChange={this.onChangeHandler}>\r\n                                    {authors.map((author, index) => (\r\n                                        <option key={index} value={author}>{author}</option>\r\n\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"Search-input-container\">\r\n                                <label htmlFor=\"titleFilter\">Tytuł</label>\r\n                                <input type=\"checkbox\" onChange={this.onChangeHandler} name=\"title\" id=\"title\"\r\n                                       value={this.state.search}/>\r\n                            </div>\r\n                            <div className=\"Search-input-container\">\r\n                                <label htmlFor=\"bodyFilter\">Treść</label>\r\n                                <input type=\"checkbox\" onChange={this.onChangeHandler} name=\"body\" id=\"body\"\r\n                                       value={this.state.search}/>\r\n                            </div>\r\n                            <div className=\"Search-input-container\">\r\n                                <label htmlFor=\"favoritesFilter\">Ulubione</label>\r\n                                <input type=\"checkbox\" onChange={this.onChangeHandler} name=\"favorite\" id=\"favorite\"\r\n                                       value=\"true\"/>\r\n                            </div>\r\n                            <div className=\"Search-input-container\">\r\n                                <input type=\"text\" className=\"Search-input\" onChange={this.onSearchInputHandler}\r\n                                       placeholder=\"Wyszukaj...\" name=\"query\" id=\"query\"/>\r\n                                <button type=\"submit\">Szukaj</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nconst mapDispatchToProps = {\r\n    filterPosts,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n","import React from \"react\";\n\n\nclass SortMenuItem extends React.Component {\n    onClickBtn = () => {\n        this.props.onClick(this.props.id);\n    };\n\n    render() {\n        const {id, label, order, orderBy} = this.props;\n        return (\n            <div className=\"SortMenu-elem\">\n                <div className=\"SortMenu-sort\">\n                    <button className=\"Button-link\" onClick={this.onClickBtn}><span>{label}</span></button>\n                    {orderBy === id &&\n                    <span className=\"Sort-arrow\">{order === \"asc\" ? \"\\u2191\" : \"\\u2193\"}</span>}</div>\n                <div>|</div>\n            </div>\n        );\n    }\n}\n\nexport default SortMenuItem;","import React from \"react\";\nimport \"./SortMenu.css\";\nimport SortMenuItem from \"./SortMenuItem\";\n\nconst options = [{id: \"id\", label: \"Ostatnie\"}, {id: \"title\", label: \"Tytuł\"}, {id: \"favorite\", label: \"Ulubione\"}];\n\nclass SortMenu extends React.Component {\n    onClickBtn = (id) => {\n        this.props.onClick(id)\n    };\n\n    render() {\n        const {order, orderBy} = this.props;\n        return (\n            <div className=\"SortMenu-sort-container\">\n                <p>Sortuj wg:</p>\n                {options.map(option => (\n                    <SortMenuItem key={option.id} id={option.id} label={option.label} onClick={this.onClickBtn} order={order}\n                                  orderBy={orderBy}/>\n                ))}\n            </div>\n        );\n    }\n\n}\n\nexport default SortMenu;\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport {connect} from \"react-redux\";\r\nimport \"./PostList.css\"\r\nimport {getPostsDataRequested, sortPostsByParam} from \"../../store/actions\";\r\nimport {getPostListState} from \"../../store/selectors\";\r\nimport Pagination from \"../pagination/Pagination\";\r\nimport Search from \"../search/Search\";\r\nimport {paginate} from \"../../helpers/paginate\";\r\nimport SortMenu from \"../sort/SortMenu\";\r\n\r\n\r\n\r\nclass PostList extends React.Component {\r\n    state = {\r\n        currentPage: 1,\r\n        postPerPage: 10,\r\n        orderBy: \"id\",\r\n        order: \"asc\",\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getPosts();\r\n    }\r\n\r\n    getPosts = () => {\r\n        this.props.getPostsDataRequested();\r\n    };\r\n\r\n    handleChangePage = (event) => {\r\n        this.setState({\r\n            currentPage: Number(event.target.id)\r\n        });\r\n    };\r\n    sortData = (id) => {\r\n        this.setState(state =>({\r\n            ...state,\r\n            orderBy: id,\r\n            order: state.order === \"asc\" ? \"desc\" : \"asc\",\r\n        }), () => {\r\n            this.props.sortPostsByParam(this.state.order, this.state.orderBy);\r\n        });\r\n\r\n    };\r\n\r\n    render() {\r\n        const {data} = this.props;\r\n        const {postPerPage, currentPage} = this.state;\r\n        const currentPosts = paginate(data.list, postPerPage, currentPage);\r\n        return (\r\n            <div className=\"List-container\">\r\n                {data.loading ? (\r\n                    <p>Ładowanie danych ...</p>\r\n                ) : (\r\n                    <>\r\n                    <div className=\"PostList-filter-container\">\r\n                        <SortMenu order={this.state.order} orderBy={this.state.orderBy} onClick={this.sortData}/>\r\n                        <Search/>\r\n                    </div>\r\n                    <ul className=\"list\">\r\n\r\n                        {data.list.length > 0 ? (\r\n                            <>\r\n                            {currentPosts.map(post => (\r\n                                <Post key={post.id} data={post}/>\r\n                            ))}\r\n                            </>\r\n                        ):(\r\n                            <li>Brak postów spełniających kryteria filtrowania.</li>\r\n                        )}\r\n\r\n\r\n                    </ul>\r\n                    <ul className=\"pagination\">\r\n                        <Pagination\r\n                            rowsPerPage={postPerPage}\r\n                            onChangePage={(e) => this.handleChangePage(e)}\r\n                            count={data.list.length}\r\n                            page={currentPage}\r\n                        />\r\n                    </ul>\r\n                    </>\r\n                )}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    data: getPostListState(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getPostsDataRequested,\r\n    sortPostsByParam,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\r\n","export function paginate(data, perPage, currPage) {\r\n    const lastPostIndex = currPage * perPage;\r\n    const firstPostIndex = lastPostIndex - perPage;\r\n    return data.slice(firstPostIndex, lastPostIndex);\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./header\";\nimport PostList from \"./posts/PostList\";\n\nconst App = () => (\n    <div className=\"App\">\n        <Header/>\n        <PostList/>\n    </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}